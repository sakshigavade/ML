LA 1

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {

    // Structure to hold student data
    struct Student {
        uint id;
        string name;
        uint age;
        string course;
    }

    // Array to store multiple student structures
    Student[] public students;

    // Mapping to track student IDs to ensure uniqueness
    mapping(uint => bool) public studentExists;

    // Event to log student addition
    event StudentAdded(uint id, string name, uint age, string course);

    // Constructor marked as payable to accept Ether during deployment
    constructor() payable {
        // You can handle any Ether received during contract deployment here
    }

    // Fallback function to handle unexpected ETH sent to the contract
    fallback() external payable {
        // Handle ETH transfers or log a message
    }

    // Function to add a new student
    function addStudent(uint _id, string memory _name, uint _age, string memory _course) public {
        require(!studentExists[_id], "Student ID already exists.");
        students.push(Student(_id, _name, _age, _course));
        studentExists[_id] = true;

        // Emit event to log student addition
        emit StudentAdded(_id, _name, _age, _course);
    }

    // Function to get a student's details by index
    function getStudent(uint index) public view returns (uint, string memory, uint, string memory) {
        require(index < students.length, "Invalid index.");
        Student memory student = students[index];
        return (student.id, student.name, student.age, student.course);
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint) {
        return students.length;
    }

    // Receive ETH into the contract
    receive() external payable {}

    // Function to withdraw any ETH sent to the contract
    function withdrawFunds() public {
        (bool success, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(success, "Withdrawal failed.");
    }
}

LA 2

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EmployeeData {

    // Structure to hold employee data
    struct Employee {
        uint id;
        string name;
        uint age;
        string position;
    }

    // Array to store multiple employee structures
    Employee[] public employees;

    // Mapping to track employee IDs to ensure uniqueness
    mapping(uint => bool) public employeeExists;

    // Event to log employee addition
    event EmployeeAdded(uint id, string name, uint age, string position);

    // Constructor marked as payable to accept Ether during deployment
    constructor() payable {
        // You can handle any Ether received during contract deployment here
    }

    // Fallback function to handle unexpected ETH sent to the contract
    fallback() external payable {
        // Handle ETH transfers or log a message
    }

    // Function to add a new employee
    function addEmployee(uint _id, string memory _name, uint _age, string memory _position) public {
        require(!employeeExists[_id], "Employee ID already exists.");
        employees.push(Employee(_id, _name, _age, _position));
        employeeExists[_id] = true;

        // Emit event to log employee addition
        emit EmployeeAdded(_id, _name, _age, _position);
    }

    // Function to get an employee's details by index
    function getEmployee(uint index) public view returns (uint, string memory, uint, string memory) {
        require(index < employees.length, "Invalid index.");
        Employee memory employee = employees[index];
        return (employee.id, employee.name, employee.age, employee.position);
    }

    // Function to get the total number of employees
    function getEmployeeCount() public view returns (uint) {
        return employees.length;
    }

    // Receive ETH into the contract
    receive() external payable {}

    // Function to withdraw any ETH sent to the contract
    function withdrawFunds() public {
        (bool success, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(success, "Withdrawal failed.");
    }
}

LA 3
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount {
    address public owner;
    uint public balance;

    // Constructor marked as payable to allow receiving Ether on contract creation
    constructor() payable {
        owner = msg.sender;
        balance = msg.value; // The contract will accept initial Ether sent during deployment
    }

    // Deposit function to add funds to the account
    function deposit() public payable {
        balance += msg.value;
    }

    // Withdraw function to withdraw funds from the account
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only the owner can withdraw.");
        require(amount <= balance, "Insufficient balance.");
        balance -= amount;
        payable(msg.sender).transfer(amount);
    }

    // Show balance function
    function showBalance() public view returns (uint) {
        return balance;
    }
}

LA 4
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ProductInventory {
    address public owner;
    mapping(uint => uint) public productStock;

    // Constructor marked as payable to allow receiving Ether on contract creation
    constructor() payable {
        owner = msg.sender;
    }

    // Modifier to restrict access to the owner only
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action.");
        _;
    }

    // Receive product to increase stock
    function receiveProduct(uint productId, uint quantity) public onlyOwner {
        productStock[productId] += quantity;
    }

    // Sale product to decrease stock
    function sellProduct(uint productId, uint quantity) public onlyOwner {
        require(productStock[productId] >= quantity, "Insufficient stock.");
        productStock[productId] -= quantity;
    }

    // Show stock for a specific product
    function showStock(uint productId) public view returns (uint) {
        return productStock[productId];
    }
}

LA 5

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CustomerData {

    // Structure to hold customer data
    struct Customer {
        uint id;
        string name;
        uint age;
        string addressInfo;
    }

    // Array to store multiple customer structures
    Customer[] public customers;

    // Mapping to track customer IDs to ensure uniqueness
    mapping(uint => bool) public customerExists;

    // Event to log customer addition
    event CustomerAdded(uint id, string name, uint age, string addressInfo);

    // Constructor marked as payable to accept Ether during deployment
    constructor() payable {
        // You can handle any Ether received during contract deployment here
    }

    // Fallback function to handle unexpected ETH sent to the contract
    fallback() external payable {
        // Handle ETH transfers or log a message
    }

    // Function to add a new customer
    function addCustomer(uint _id, string memory _name, uint _age, string memory _addressInfo) public {
        require(!customerExists[_id], "Customer ID already exists.");
        customers.push(Customer(_id, _name, _age, _addressInfo));
        customerExists[_id] = true;

        // Emit event to log customer addition
        emit CustomerAdded(_id, _name, _age, _addressInfo);
    }

    // Function to get a customer's details by index
    function getCustomer(uint index) public view returns (uint, string memory, uint, string memory) {
        require(index < customers.length, "Invalid index.");
        Customer memory customer = customers[index];
        return (customer.id, customer.name, customer.age, customer.addressInfo);
    }

    // Function to get the total number of customers
    function getCustomerCount() public view returns (uint) {
        return customers.length;
    }

    // Receive ETH into the contract
    receive() external payable {}

    // Function to withdraw any ETH sent to the contract
    function withdrawFunds() public {
        (bool success, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(success, "Withdrawal failed.");
    }
}
