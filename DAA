LA 1
#include<iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

int stepcount = 0;

void printFibonacciRecursive(int n) 
{
    static int n1 = 0, n2 = 1, n3;

    if (n > 0) 
    {
        stepcount++;
        n3 = n1 + n2;
        n1 = n2;
        n2 = n3;
        cout << n3 << " ";
        printFibonacciRecursive(n - 1);
    }
}

void printFibonacciIterative(int number)
{
    int n1 = 0, n2 = 1, n3;
    cout << n1 << " " << n2 << " "; // Printing 0 and 1
    for(int i = 2; i < number; ++i) // Loop starts from 2 because 0 and 1 are already printed
    {
        n3 = n1 + n2;
        cout << n3 << " ";
        n1 = n2;
        n2 = n3;
    }
}

int main() 
{
    int n;
    int choice;

    cout << "Enter the number of elements: ";
    cin >> n;

    cout << "Choose the method to generate Fibonacci series:\n";
    cout << "1. Recursive\n";
    cout << "2. Iterative\n";
    cout << "Enter choice (1 or 2): ";
    cin >> choice;

    auto start_time = high_resolution_clock::now();
    
    cout << "Fibonacci Series: ";
    if (choice == 1) {
        cout << "0 " << "1 "; // First two numbers
        printFibonacciRecursive(n - 2); // n-2 because 2 numbers are already printed
    } 
    else if (choice == 2) {
        printFibonacciIterative(n); // Iterative method
    } 
    else {
        cout << "Invalid choice!";
        return 1;
    }

    auto end_time = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end_time - start_time);

    cout << "\nElapsed Time: " << duration.count() << " microseconds" << endl;

    // Additional space tracking
    cout << "Estimated Space Used: " << sizeof(int) * 3 * (n - 2) << " bytes" << endl;

    return 0;
}

LA 3

#include <iostream>
#include <algorithm> // Include this for 'sort'
#include <chrono>
#include <iomanip>
using namespace std;
struct Item {
int value;
int weight;
};
class Solution {
public:
static bool comp(Item a, Item b) {
double r1 = static_cast<double>(a.value) / static_cast<double>(a.weight);
double r2 = static_cast<double>(b.value) / static_cast<double>(b.weight);
return r1 > r2;
}
double fractionalKnapsack(int W, Item arr[], int n) {
sort(arr, arr + n, comp);
int curWeight = 0;
double finalValue = 0.0;
for (int i = 0; i < n; i++) {
 
if (curWeight + arr[i].weight <= W) {
curWeight += arr[i].weight;
finalValue += arr[i].value;
} else {
int remain = W - curWeight;
finalValue += (arr[i].value / static_cast<double>(arr[i].weight)) *
static_cast<double>(remain);
break;
}
}
return finalValue;
}
};
int main() {
int n = 3, weight = 50;
Item arr[n] = { {100,20},{60,10},{120,30} };
Solution obj;
auto start_time = chrono::high_resolution_clock::now();
double ans = obj.fractionalKnapsack(weight, arr, n);
auto end_time = chrono::high_resolution_clock::now();
auto duration = chrono::duration_cast<chrono::microseconds>(end_time -
start_time);
cout << "The maximum value is " << fixed << setprecision(2) << ans <<
endl;
cout << "Elapsed Time: " << duration.count() << " microseconds" << endl;

return 0;
}

LA 4

#include <iostream>
#include <vector>
using namespace std;
pair<int, vector<int>> knapsack_01(int n, vector<int>& values, vector<int>& weights, int W) {
    // Create a 2D DP array to store the maximum value at each n, W
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Build the DP table
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0; // Base case
            } else if (weights[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    // Find out which items were included
    vector<int> selected_items;
    int i = n, w = W;
    while (i > 0 && w > 0) {
        if (dp[i][w] != dp[i - 1][w]) {
            selected_items.push_back(i - 1); // Item is included
            w -= weights[i - 1];
        }
        i--;
    }

    return {dp[n][W], selected_items}; // Return the maximum value and selected items
}

int main() {
    int n = 3;
    vector<int> values = {60, 100, 120};
    vector<int> weights = {10, 20, 30};
    int W = 50;

    auto result = knapsack_01(n, values, weights, W);
    cout << "Maximum value: " << result.first << endl;
    cout << "Selected items: ";
    for (int index : result.second) {
        cout << index << " "; // Output the indices of selected items
    }
    cout << endl;

    return 0;
}

LA 5
#include <iostream>
#include <vector>
#include <set>
using namespace std;
class NQueens {
public:
    vector<vector<string>> solveNQueens(int n, int first_queen_col) {
        // Initialize sets for columns and diagonals
        set<int> col, posDiag, negDiag;
        vector<vector<string>> res;
        vector<string> board(n, string(n, '.'));

        // Place the first queen
        col.insert(first_queen_col);
        posDiag.insert(0 + first_queen_col);
        negDiag.insert(0 - first_queen_col);
        board[0][first_queen_col] = 'Q';

        // Start backtracking from the second row
        backtrack(1, n, col, posDiag, negDiag, board, res);
        return res;
    }
private:
    void backtrack(int r, int n, set<int>& col, set<int>& posDiag, set<int>& negDiag,
                   vector<string>& board, vector<vector<string>>& res) {
        if (r == n) {
            res.push_back(board);
            return;
        }

        for (int c = 0; c < n; c++) {
            if (col.count(c) || posDiag.count(r + c) || negDiag.count(r - c)) {
                continue; // Skip if the column or diagonal is already occupied
            }

            // Place queen
            col.insert(c);
            posDiag.insert(r + c);
            negDiag.insert(r - c);
            board[r][c] = 'Q';

            // Recur to place the next queen
            backtrack(r + 1, n, col, posDiag, negDiag, board, res);

            // Remove queen and backtrack
            col.erase(c);
            posDiag.erase(r + c);
            negDiag.erase(r - c);
            board[r][c] = '.';
        }
    }
};

int main() {
    int n = 8;
    int first_queen_col = 1;
    NQueens solver;

    auto solutions = solver.solveNQueens(n, first_queen_col);
    if (!solutions.empty()) {
        for (const auto& row : solutions[0]) {
            cout << row << endl; // Output the first solution
        }
    } else {
        cout << "No solutions found." << endl;
    }

    return 0;
}
